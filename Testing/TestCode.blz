:main
	echo "hello world"	# Testing that commands work
	a = 1337
	b = 1 + 3
	c = a + b			# Simple Expressions work
	arr[b] = 32
	g[b] = b			# Arrays work
	echo "Do arrays work? " arr[b]
	arr[3] = a
	echo "Do arrays at constant indices work? " arr[3]
	echo "Do nested array accessors work? " arr[g[b]]
	echo "1337+4 = " c
	echo "1337 = " a
	set *l {system.os.name}
	echo {file.name} " <-file name, os-> " *l	# SystemEnv variables work
	echo a " and " c
	
	(echo "1+2 = " (add 1 2))
	(echo "4+(4+8) = " (add 4 (add 4 8)))	# Lambda Function Calls Work
	(define dbl (x) (add x x))
	(echo "double 3 = " (dbl 3))
	(define sqr (x) (mul x x))
	(echo "9 squared = " (sqr 9))			# Defining functions works
	(define nested_mul (x y z) (mul x (mul y z)))
	(echo "2*3*4 = " (nested_mul 2 3 4))
	(define fact (x) (if x==0 1 (mul x (fact (sub x 1)))))	# If blocks work
	(define curriedaddition (x) (define ca (y) (add x y)))
	(echo "Does curried addition work? " ((curriedaddition 3) 6))	# Currying works
	(define curriedmultiplication (x y) (define cm (z) (mul x (mul y z))))
	(echo "Does curried multiplication work? " ((curriedmultiplication 3 4) 5))
	(echo "Curried addition of 3 and 5: " (ca 5))
	(echo "Factorial 7: " (fact 7))

	set loopCounter 0
	while loopCounter < 3
		echo "looptest"
		set innerCounter 3
		while innerCounter >= 0		# Nested loops work
			echo innerCounter
			sub innerCounter 1 innerCounter
		end
		add loopCounter 1 loopCounter
	end
	
	while true
		echo "HOPEFULLY BREAK WORKS"
		break
	end
	
	
	for i = 0, i < 10, i = i + 1
		mod i 2 mod
		if mod == 1
			CONTINUE
		end
		echo "Only evens " i
	end

	echo "Testing WAIT"
	wait (nested_mul 10 6 10)	# Wait works along with lambda statements as arguments
	echo "Done testing WAIT"

	echo (dbl 5) " = 10"
	echo "Please enter three numbers"
	nin a
	nin b
	(echo (if a==b "Your inputs were the same!" "Your inputs were different!"))	# User input works

	nin c
	echo "The product of these numbers is " (nested_mul a b c)

	rjp checkglobal	# Calling methods works

	addprocess ExampleCode main	# Calling processes works

	tensori ten 2

	for i = 0, i<=20, i = i + 1
		f = 2 * i
		tensorset ten f i 0
	end

	call function_call_test (5, 6, 7)	# Passing arguments works
	call checkglobal						# Global variables work

	for i=0,i<=20, i = i + 2
		tensorget ten i 0 g
		echo g " is the " i "th index"	# Tensors work
	end
end


:function_call_test (a, b, c)
	echo a ", " b ", and " c " were passed as variables"
	a = a + 1
	if a < 20
		call function_call_test (a b c)
	end
end


:checkglobal
	echo {blz.method.stack}
	echo *l " should be your OS"
END