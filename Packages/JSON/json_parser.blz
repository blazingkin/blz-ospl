:parse_json(json)
    JSONState(json).value
end

constructor JSONState(json)
    tokens = []
    lexing_position = 0
    on_token = 0
    tokenize()
    value = parse()

    :tokenize
        num_chars = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "."]
        for lexing_position = 0; lexing_position < json.length(); lexing_position++
            char = json[lexing_position]
            if char == {text.space}

            else if char == {text.newline}

            else if char == {text.tab}

            else if char == "{"
                # Open object
                tokens.add!(JSONToken("OO"))
            else if char == "}"
                # Close object
                tokens.add!(JSONToken("CO"))
            else if char == ":"
                # Key value seperator
                tokens.add!(JSONToken("OS"))
            else if char == ","
                tokens.add!(JSONToken("C"))
            else if char == "["
                # Open array
                tokens.add!(JSONToken("OA"))
            else if char == "]"
                # Close array
                tokens.add!(JSONToken("CA"))
            else if char == "\""
                lexing_position++
                result = ""
                # Need to handle unclosed string gracefully
                while json[lexing_position] != "\""
                    if json[lexing_position] == "\\"
                        lexing_position++
                        # Need to handle \n, \t, \r etc
                        result = result + json[lexing_position]                        
                    else
                        result = result + json[lexing_position]
                    end
                    lexing_position++
                end
                # Add string token
                tokens.add!(JSONToken("L", result))
            else if char == "n" # Handle null
                if json.length() < lexing_position + 4 || json[lexing_position + 1] != "u" || json[lexing_position + 2] != "l" || json[lexing_position + 3] != "l"
                    throw JSONError("Unexpected character n")
                end
                lexing_position = lexing_position + 3
                tokens.add!(JSONToken("L", {blz.nil}))
            else if char == "t" # Handle true
                if json.length() < lexing_position + 4 || json[lexing_position + 1] != "r" || json[lexing_position + 2] != "u" || json[lexing_position + 3] != "e"
                    throw JSONError("Unexpected character t")
                end
                lexing_position = lexing_position + 3
                tokens.add!(JSONToken("L", true))
            else if char == "f" # Handle false
                if json.length() < lexing_position + 5 || json[lexing_position + 1] != "a" || json[lexing_position + 2] != "l" || json[lexing_position + 3] != "s" || json[lexing_position + 4] != "e"
                    throw JSONError("Unexpected character f")
                end
                lexing_position = lexing_position + 4
                tokens.add!(JSONToken("L", false))
            else if num_chars.contains?(char)
                building_string = ""
                # While there are more numbers to get, read them
                while (json.length() > lexing_position) && num_chars.contains?(json[lexing_position])
                    building_string = building_string + json[lexing_position]
                    lexing_position++
                end
                lexing_position-- # We went one too far, so we have to backtrace
                if building_string.is_number?() == false
                    throw JSONError("Invalid numerical sequence in JSON "+building_string)
                end
                tokens.add!(JSONToken("L", building_string.to_number()))
            end
        end
    end
    
    # Recursive parse function
    :parse
        type = peek_type()
        value = consume(type)
        if type == "L"
            return value
        else if type == "OA" # Handle arrays
            arr = []
            comma_found = true
            while comma_found && peek_type() != "CA"
                comma_found = false
                arr.add!(parse())
                if peek_type() == "C"
                    comma_found = true
                    consume("C")
                end
            end
            consume("CA")
            return arr
        else if type == "OO"
            obj = {}
            comma_found = true
            while comma_found && peek_type != "CO"
                comma_found = false
                key = parse()
                consume("OS")
                value = parse()
                obj[key] = value
                if peek_type() == "C"
                    comma_found = true
                    consume("C")
                end
            end
            consume("CO")
            return obj
        else
            throw JSONError("Unexpected token "+type+" ("+value+")")
        end
    end
    
    :peek_type
        if on_token > tokens.size()
            throw JSONError("Expected some JSON token, but reached end of string instead")
        else
            (tokens[on_token]).type
        end
    end

    :consume(type)
        if on_token >= tokens.size()
            throw JSONError("Expected token "+type+" but reached end of JSON instead")
        end
        if tokens[on_token].type != type
            throw JSONError("Expected token of type "+type+" but got "+tokens[on_token] + "instead")
        end
        on_token++
        tokens[on_token - 1].token
    end

end

constructor JSONToken(type, token)
    :show
        "Token " + type + token
    end
end

# All errors thrown will be JSONErrors
constructor JSONError(message)
    type = "JSON"
    :show
        "JSON Error: " + message
    end
end