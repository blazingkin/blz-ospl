:has_key?(hash, key)
	hash.keys().contains?(key)
end

:keys(hash)
	BLZINTERNALHASHGETKEYS hash
end

:values(hash)
	# Abuses partial function application of primitives
	# Could break if the internal implementation changes
	hash.keys().map(hash.get)
end

:set(hash, key, value)
	hash[key] = value
	return hash
end

:put(hash, key, value)
	hash.set(key, value)
end

:get(hash, key)
	if hash.has_key?(key)
		return hash[key]
	else
		return {blz.nil}
	end
end

:empty?(hash)
	return hash == {}
end

:nil?
	return false
end	

:to_string(hash)
	return hash + ""
end

:show(hash)
	hash
end

:to_json(hash)
	result = "{" + {text.newline}
	key_set = hash.keys()
	key_size = key_set.length()
	for i = 0; i < (key_size - 1); i++
		key = key_set[i]
		result = result + key.to_json() + ": " + hash[key].to_json() + "," + {text.newline}
	end
	if key_size != 0
		key = key_set[key_size - 1]
		result = result + key.to_json() + ": " + hash[key].to_json()
	end
	result + {text.newline} + "}"
end