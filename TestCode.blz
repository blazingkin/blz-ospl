:main
	ECHO "hello world"	# Testing that commands work
	a = 1337
	b = 1 + 3
	c = a + b			# Simple Expressions work
	arr[b] = 32
	g[b] = b			# Arrays work
	ECHO "Do arrays work? " arr[b]
	arr[3] = a
	ECHO "Do arrays at constant indices work? " arr[3]
	ECHO "Do nested array accessors work? " arr[g[b]]
	ECHO "1337+4 = " c
	ECHO "1337 = " a
	SET *l {system.os.name}
	ECHO {file.name} " <-file name, os-> " *l	# SystemEnv variables work
	ECHO a " and " c

	(ECHO "1+2 = " (ADD 1 2))
	(ECHO "4+(4+8) = " (ADD 4 (ADD 4 8)))	# Lambda Function Calls Work
	(DEFINE dbl (x) (ADD x x))
	(ECHO "double 3 = " (dbl 3))
	(DEFINE sqr (x) (MUL x x))
	(ECHO "9 squared = " (sqr 9))			# Defining functions works
	(DEFINE nested_mul (x y z) (MUL x (MUL y z)))
	(ECHO "2*3*4 = " (nested_mul 2 3 4))
	(DEFINE fact (x) (IF x==0 1 (MUL x (fact (SUB x 1)))))	# If blocks work
	(DEFINE curriedaddition (x) (DEFINE ca (y) (ADD x y)))
	(ECHO "Does curried addition work? " ((curriedaddition 3) 6))	# Currying works
	(DEFINE curriedmultiplication (x y) (DEFINE cm (z) (MUL x (MUL y z))))
	(ECHO "Does curried multiplication work? " ((curriedmultiplication 3 4) 5))
	(ECHO "Curried addition of 3 and 5: " (ca 5))
	(ECHO "Factorial 7: " (fact 7))

	SET loopCounter 0
	WHILE loopCounter < 3
		ECHO "looptest"
		SET innerCounter 3
		WHILE innerCounter >= 0		# Nested loops work
			ECHO innerCounter
			SUB innerCounter 1 innerCounter
		END
		ADD loopCounter 1 loopCounter
	END
	
	WHILE 1 == 1
		ECHO "HOPEFULLY BREAK WORKS"
		BREAK
	END
	
	
	FOR i = 0, i < 10, i = i + 1
		MOD i 2 mod
		IF mod == 1
			CONTINUE
		END
		ECHO "Only evens " i
	END

	ECHO "Testing WAIT"
	WAIT (nested_mul 10 6 10)	# Wait works along with lambda statements as arguments
	ECHO "Done testing WAIT"

	ECHO (dbl 5) " THIS IS A TEST"
	ECHO "Please enter three numbers"
	NIN a
	NIN b
	(ECHO (IF a==b "Your inputs were the same!" "Your inputs were different!"))	# User input works

	NIN c
	ECHO "The product of these numbers is " (nested_mul a b c)

	RJP checkglobal	# Calling methods works

	ADDPROCESS ExampleCode main	# Calling processes works

	TENSORI ten 2

	FOR i = 0, i<=20, i = i + 1
		f = 2 * i
		TENSORSET ten f i 0
	END

	RJP function_call_test (5, 6, 7)	# Passing arguments works
	RJP checkglobal						# Global variables work

	FOR i=0,i<=20, i = i + 2
		TENSORGET ten i 0 g
		ECHO g " is the " i "th index"	# Tensors work
	END
END


:function_call_test (a, b, c)
	ECHO a ", " b ", and " c " were passed as variables"
	a = a + 1
	IF a < 20
		RJP function_call_test (a b c)
	END
END


:checkglobal

ECHO {blz.method.stack}
ECHO *l " should be your OS"

END